const { callYourAI } = require('./aiService');
const { scrapeShopeeProduct } = require('./scraper');
// server.js
const express = require('express');
const cors = require('cors');
// Funções de scraping e IA serão importadas ou definidas aqui depois

const app = express();
const PORT = process.env.PORT || 3001; // Porta para o servidor rodar

// Middlewares
app.use(cors()); // Habilita o CORS para todas as rotas
app.use(express.json()); // Permite que o servidor entenda JSON vindo nas requisições

// Rota principal da API (exemplo)
app.get('/', (req, res) => {
    res.send('API do Otimizador Shopee está no ar!');
});

// Rota para analisar o produto (será implementada em detalhes)
app.post('/api/analisar-produto', async (req, res) => {
    // Lógica virá aqui
   const dadosOriginais = await scrapeShopeeProduct(shopeeProductUrl);
if (!dadosOriginais || Object.keys(dadosOriginais).length === 0) {
    return res.status(500).json({ status: "erro", mensagem: "Não foi possível extrair dados do produto." });
}
const resultadoIA = await callYourAI(dadosOriginais);
const respostaFinal = {
    status: "sucesso",
    mensagem: "Análise concluída com sucesso!",
    dadosOriginais: dadosOriginais, // Dados do scraping
    dadosOtimizados: resultadoIA.dadosOtimizados, // Título/Descrição da IA
    insightsDaIA: resultadoIA.insightsDaIA // Insights da IA
};
res.json(respostaFinal);

    if (!shopeeProductUrl) {
        return res.status(400).json({ status: "erro", mensagem: "URL do produto não fornecida." });
    }

    try {
        // 1. Chamar função de scraping
        // const dadosOriginais = await scrapeShopeeProduct(shopeeProductUrl);

        // 2. Chamar sua IA com os dadosOriginais
        // const resultadoIA = await callYourAI(dadosOriginais);

        // 3. Montar a resposta final
        // const respostaFinal = { ...dadosOriginais, ...resultadoIA };

        // Por enquanto, uma resposta mockada:
        const mockResponse = {
            status: "sucesso",
            mensagem: "Análise mockada concluída.",
            dadosOriginais: { precoOriginal: "R$ 99,90", tituloOriginal: "Produto Mockado" },
            dadosOtimizados: { tituloOtimizado: "Título Mockado Otimizado pela IA" },
            insightsDaIA: [{ type: "tip", title: "Dica Mockada", description: "Este é um insight mockado.", shortTermAction: "Ação mockada", estimatedImpact: "Impacto mockado" }]
        };
        res.json(mockResponse);

    } catch (error) {
        console.error("Erro no endpoint /api/analisar-produto:", error);
        res.status(500).json({ status: "erro", mensagem: "Erro interno no servidor ao processar a solicitação." });
    }
});

app.listen(PORT, () => {
    console.log(`Servidor backend rodando na porta ${PORT}`);
});